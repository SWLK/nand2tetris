// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// Load A register
	
	// + If opcode=0, then mux out is instruction (A-instruction)
	// + If opcode=1, then mux out is ALU output
	Mux16 (a=instruction,b=aluLoopBack,sel=instruction[15],out=aFeed);

	// + If opcode=0, then load aFeed
	// + If opcode And instruction[5], load aFeed
	// + load = Or (Not (opcode), And (opcode, instruction[5]))
	Not (in=instruction[15],out=aInstr);
	And (a=instruction[15],b=instruction[5],out=cInstrLDA);
	Or (a=aInstr,b=cInstrLDA,out=loadA);

	// + A register with out directed to Mux and addressM
	ARegister (in=aFeed,load=loadA,out=aReg,out[0..14]=addressM);

	// Load A register or M register into ALU
	Mux16 (a=aReg,b=inM,sel=instruction[12],out=amFeed);

	// Load D register

	// If opcode And instruction[4], then load D register with ALU loopback
	And (a=instruction[15],b=instruction[4],out=loadD);
	DRegister (in=aluLoopBack,load=loadD,out=dReg);

	// Constructing ALU
	ALU (x=dReg,y=amFeed,zx=instruction[11],
						nx=instruction[10],
						zy=instruction[9],
						ny=instruction[8],
						f=instruction[7],
						no=instruction[6],
						zr=zr,ng=ng,out=aluLoopBack,out=outM);

	// Setting writeM
	And (a=instruction[15],b=instruction[3],out=writeM);

	// Constructing PC
	
	// + Load bit logic

	// ++ If instruction[2] (out<0), check if ng
	And (a=instruction[2],b=ng,out=j1);

	// ++ If instruction[1] (out=0), check if zr
	And (a=instruction[1],b=zr,out=j2);

	// ++ If instruction[0] (out>0), check if Nor(ng,zr)
	Or (a=ng,b=zr,out=ngzr);
	Not (in=ngzr,out=ps);
	And (a=instruction[0],b=ps,out=j3);
	
	// ++ Or (j1,j2,j3)
	Or (a=j1,b=j2,out=j12);
	Or (a=j12,b=j3,out=j123);

	// ++ Verify that the instruction is a C-instruction (opcode=1)
	And (a=j123,b=instruction[15],out=loadJump);
	
	// + PC
	PC (in=aReg,load=loadJump,inc=true,reset=reset,out[0..14]=pc);
}
